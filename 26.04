import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Main {
    public static void main(String[] args) {
    System.setProperty ("webdriver.chrome.driver", "d:гк/chromedriver.exe");
    WebDriver driver = new ChromeDriver();
    driver.get("https://google.com");
    //driver.close();
        driver.manage().window().maximize();
        String title=driver.getTitle();
        System.out.println(title);
    }
}


public class String2 {
    public static void main(String[] args) {
        String str = "w3resource.com";
        System.out.println("Original String : " + str);

        // codepoint at index 1
        int val1 = str.codePointAt(1);

        // codepoint at index 9
        int val2 = str.codePointAt(9);

        // prints character at index1 in string
        System.out.println("Character(unicode point) = " + val1);
        // prints character at index9 in string
        System.out.println("Character(unicode point) = " + val2);
    }
}


import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.jupiter.*;
import org.junit.jupiter.api.Assertions;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class GoogleTest {
    private static WebDriver driver;
    @BeforeClass
    public static void openBrowser(){
            //Assertions.assertEquals("","");
            System.setProperty("webdriver.chrome.driver", "d:/гк/chromedriver.exe");
            driver = new ChromeDriver();
            driver.get("https://google.com");
            driver.manage().window().maximize();
        }
        @AfterClass
        public static void closeBrowser(){
        //driver.close();
    }
    @Test
    public void getTitle(){
        Assertions.assertEquals("Google",driver.getTitle());
    }
    @Test
    public void getUrl(){
        Assertions.assertTrue(
                driver.getCurrentUrl().contains("google.com"));
    }

    @Test
    public void search(){
        String text = "text";
        WebElement input = driver.findElement(By.xpath("//input[@title='Поиск']"));
        input.sendKeys(text);
        input.sendKeys(Keys.ENTER);
        //Проверка, что поиск состоялся
        Assertions.assertTrue(driver.getCurrentUrl().contains("google.com/search"));
    }
}


import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.*;

public class String2Test {
    private static final ByteArrayOutputStream out = new ByteArrayOutputStream();
    private static final PrintStream origOut = System.out;

    @BeforeClass
    public static void setupStream(){
        System.setOut(new PrintStream(out));
    }

    @AfterClass
    public static void restoreStream(){
        System.setOut(origOut);
    }

    @Test
    public void test(){
        // System.setOut(new PrintStream(out));
        //System.out.print("hello");
        String2.main(new String[]{});
        Assertions.assertEquals("Original String : w3resource.com\r\n" +
                "Character(unicode point) = 51\r\n" +
                "Character(unicode point) = 101\r\n", out.toString());
        //System.setOut(origOut);
    }

}
JUnitTesting.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="module-library">
      <library name="JUnit4">
        <CLASSES>
          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.12/junit-4.12.jar!/" />
          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
        </CLASSES>
        <JAVADOC />
        <SOURCES />
      </library>
    </orderEntry>
    <orderEntry type="module-library">
      <library name="JUnit5.4">
        <CLASSES>
          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.4.2/junit-jupiter-5.4.2.jar!/" />
          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.4.2/junit-jupiter-api-5.4.2.jar!/" />
          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar!/" />
          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar!/" />
          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.4.2/junit-platform-commons-1.4.2.jar!/" />
          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.4.2/junit-jupiter-params-5.4.2.jar!/" />
          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.4.2/junit-jupiter-engine-5.4.2.jar!/" />
          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.4.2/junit-platform-engine-1.4.2.jar!/" />
        </CLASSES>
        <JAVADOC />
        <SOURCES />
      </library>
    </orderEntry>
  </component>
</module>


GitHubTest
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.TestMethodOrder;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
//импорт- это подключение к библиотеке
//эта строка дает возможность выполнения в определенном порядке
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class GithubTest {
    private static WebDriver driver = null;
    //акцент на то, что объект не ициализирован
    private final String baseUrl = "https://www.github.com/";

    @Test
    @Order(1)
    //метод
    public void openBrowser() {
        //путь к драйверу указали адрес
        System.setProperty("webdriver.chrome.driver", "d:/гк/chromedriver.exe");
        //объект драйвера
        driver = new ChromeDriver();
        //ввели в строку
        driver.get(baseUrl);
        //добавили расширение
        driver.manage().window().maximize();
    }

    //проверим заголовок
    @Test
    @Order(2)
    public void getTitle() {
        //утверждение
        Assertions.assertTrue(driver.getTitle().toUpperCase().contains("Github".toUpperCase()));
    }
    //переход по ссылке
    @Test
    @Order(3)
    public void gotoLink() {
    driver.get(baseUrl+"login");
    }
    //найти элемент на странице ищем элемент на странице обращаемся к драйверу id"login field"
    @Test
    @Order(4)
    public void signIn() {
        WebElement input = driver.findElement(By.id("login_field"));
        input.sendKeys("chokolenka");
        input = driver.findElement(By.id("password"));
        input.sendKeys("chokolenka");
        //чтобы найти на странице input уникальным образом идентифицировать элемент
        input = driver.findElement(By.xpath("//input[@name='commit']"));
        input.click();
    }
    @Test
    @Order(5)
    public void signOut(){
        driver.get(baseUrl+"logout");
        WebElement input = driver
                .findElement(By.xpath("//input[@value='Sign out']"));
        input.click();
    }

}
Tests
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

public class Dates {
    public static void main(String[] args) {
       //чтобы получить текущее время LocalDate(1) - название класса, LocalDate(2) - название класса
        // у которого есть статический метод now (именно теперешнее время), date - переменная
        LocalDate date = LocalDate.now();
        System.out.println(date);

        LocalTime time = LocalTime.now();
        System.out.println(time);

        LocalDateTime dateTime = LocalDateTime.now();
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        System.out.println(dateTimeFormatter.format(dateTime));

        Calendar calendar = new GregorianCalendar();
        Date dateNow = new Date();
        System.out.println(dateNow);
    }
}




